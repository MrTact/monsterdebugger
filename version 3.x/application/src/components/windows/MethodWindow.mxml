<?xml version="1.0" encoding="utf-8"?>
<s:Window xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:tabs="components.tabs.*" width="700" height="400" minWidth="500" minHeight="300" title="MonsterDebugger - Method" showStatusBar="false" creationComplete="onCreationComplete()" xmlns:window="components.panels.window.*" initialize="onInitialize()">
	<s:layout>
		<s:HorizontalLayout gap="-1"/>
	</s:layout>
	<fx:Script>
		<![CDATA[

			import components.panels.window.MethodWindowMethod;
			import components.panels.window.MethodWindowReturn;
			import com.demonsters.debugger.MonsterDebuggerMenu;
			import com.demonsters.debugger.MonsterDebuggerUtils;


			[Binable]
			private var _item:Object;

			private var methodWindow:MethodWindowMethod;
			private var returnWindow:MethodWindowReturn;
			private function onInitialize():void
			{
				visible = false;
			}


			private function onCreationComplete():void
			{
				methodWindow = new MethodWindowMethod();
				methodWindow.data = _item;
				methodWindow.name = "Method: " + _item.name;
				leftWindow.addPanelItem(methodWindow);
				
				returnWindow = new MethodWindowReturn();
				returnWindow.name = "Return: " + _item.returnType;
				rightWindow.addPanelItem(returnWindow);
				
				MonsterDebuggerUtils.loadWindowOptions(nativeWindow, "com.demonsters.debugger.MethodWindow");
				visible = true;
				
				// Set on top
				if (MonsterDebuggerMenu.mainWindow.alwaysInFront) {
					alwaysInFront = true;
				}
				
				// Add event listener to the stage
				stage.addEventListener(KeyboardEvent.KEY_UP, function(event:KeyboardEvent):void {
					if (event.charCode == 27) {
						close();
						// The users pressed ESC
					}
				});

				methodWindow.wordwrapCheck.addEventListener(MouseEvent.CLICK, onWordwrap);
				onWordwrap(null);
				
				nativeWindow.addEventListener(Event.CLOSING, saveWindowOptions, false, 0, true);
			}
			
			
			private function saveWindowOptions(e:Event):void
			{
				MonsterDebuggerUtils.saveWindowOptions(nativeWindow, "com.demonsters.debugger.MethodWindow");
			}
			

			private function onWordwrap(e:MouseEvent):void
			{
				returnWindow.tree.wordWrap = methodWindow.wordwrapCheck.selected;
				if (methodWindow.wordwrapCheck.selected) {
					returnWindow.singleEntry.setStyle("lineBreak", "toFit");
				} else {
					returnWindow.singleEntry.setStyle("lineBreak", "explicit");
				}
			}


			public function set data(value:Object):void {
				_item = value;
			}


			public function set results(value:XML):void {
				returnWindow.data = value;
			}
		]]>
	</fx:Script>
	<tabs:TabPanel x="0" y="0" width="325" height="100%" id="leftWindow" minWidth="300" minHeight="300">
	</tabs:TabPanel>
	<tabs:TabPanel width="100%" height="100%" id="rightWindow" minWidth="250" minHeight="300">
	</tabs:TabPanel>
</s:Window>
