<?xml version="1.0" encoding="utf-8"?>
<s:MXDataGridItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="19">
	<fx:Style>
	.numericStepper{
		upArrowUpSkin:  Embed(source="../../../assets/stepper_up.png");
		downArrowUpSkin:  Embed(source="../../../assets/stepper_down.png");
		upArrowOverSkin:  Embed(source="../../../assets/stepper_up.png");
		downArrowOverSkin:  Embed(source="../../../assets/stepper_down.png");
		upArrowDownSkin:  Embed(source="../../../assets/stepper_up.png");
		downArrowDownSkin:  Embed(source="../../../assets/stepper_down.png");
		borderColor:#b2b2b2;
		borderThickness: 0;
		shadowColor:#ffffff;
	}
	</fx:Style>
	<fx:Script>
		<![CDATA[
		import components.NumericalStepper;

		import events.PropertyEvent;
			import skins.DropdownMenu;
			import skins.TextAreaSkinDataGrid;
			import spark.components.DropDownList;
			import spark.components.TextArea;
			import spark.events.IndexChangeEvent;
			import com.demonsters.debugger.MonsterDebuggerConstants;
			import mx.collections.ArrayCollection;
			import mx.controls.Label;

			// Components
			private var comboBox:DropDownList;
			private var inputField:TextArea;
			private var numNumericStepper:NumericalStepper;
			private var intNumericStepper:NumericalStepper;
			private var uintNumericStepper:NumericalStepper;


			// The new valuie
			public var newValue:Object;
			
			
			// Step size
			private var precizeStepping:Boolean = false;
			
						

			override public function set data(value:Object):void {
				super.data = value;
				newValue = value["value"];
				
				// Save the needed vars
				var edit:Boolean = value["edit"];
				var type:String = value["type"];
				
				// If not editable, place a label field
				if (!edit) {
					var label:Label = new Label();
					label.setStyle("paddingLeft", 5);
					label.setStyle("paddingRight", 5);
					label.top = 2;
					label.truncateToFit = true;
					label.text = data["value"];
					addElement(label);
					return;
				}
				
				switch(type) {
					case MonsterDebuggerConstants.TYPE_BOOLEAN:
						var comboData:ArrayCollection = new ArrayCollection(["true", "false"]);
						comboBox = new DropDownList();
						comboBox.height = 23;
						comboBox.left = 0;
						comboBox.right = -2;
						comboBox.addEventListener(IndexChangeEvent.CHANGE, onComboBoxChange, false, 0, true);
						comboBox.dataProvider = comboData;
						comboBox.selectedIndex = data["value"] == true ? 0 : 1;
						comboBox.setStyle("skinClass", skins.DropdownMenu);
						addElement(comboBox);
						break;
					case MonsterDebuggerConstants.TYPE_STRING:
						inputField = new TextArea();
						inputField.height = 23;
						inputField.left = 0;
						inputField.right = -2;
						inputField.setStyle("skinClass", skins.TextAreaSkinDataGrid);
						inputField.text = data["value"];
						inputField.addEventListener(TextEvent.TEXT_INPUT, onStringChange, false, 0, true);
						addElement(inputField);
						break;
					case MonsterDebuggerConstants.TYPE_NUMBER:
						precizeStepping = true;
						numNumericStepper = new NumericalStepper();
						numNumericStepper.minimum = int.MIN_VALUE;
						numNumericStepper.maximum = int.MAX_VALUE;
						numNumericStepper.height = 23;
						numNumericStepper.left = 0;
						numNumericStepper.right = -2;
						numNumericStepper.stepSize = 1;
						numNumericStepper.value = data["value"];
						numNumericStepper.addEventListener(Event.CHANGE, onNumberChange, false, 0, true);
						numNumericStepper.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown, false, 0, true);
						numNumericStepper.addEventListener(KeyboardEvent.KEY_UP, onKeyUp, false, 0, true);
						numNumericStepper.addEventListener(FocusEvent.FOCUS_OUT, onNumberChange, false, 0, true);
						// numNumericStepper.setStyle("skinClass", skins.numstepper.NumSkin);
						numNumericStepper.styleName = "numericStepper";
						addElement(numNumericStepper);
						break;
					case MonsterDebuggerConstants.TYPE_INT:
						precizeStepping = false;
						intNumericStepper = new NumericalStepper();
						intNumericStepper.minimum = int.MIN_VALUE;
						intNumericStepper.maximum = int.MAX_VALUE;
						intNumericStepper.height = 23;
						intNumericStepper.left = 0;
						intNumericStepper.right = -2;
						intNumericStepper.value = data["value"];
						intNumericStepper.stepSize = 1;
						intNumericStepper.addEventListener(Event.CHANGE, onIntChange, false, 0, true);
						intNumericStepper.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown, false, 0, true);
						intNumericStepper.addEventListener(KeyboardEvent.KEY_UP, onKeyUp, false, 0, true);
						intNumericStepper.addEventListener(FocusEvent.FOCUS_OUT, onIntChange, false, 0, true);
						// intNumericStepper.setStyle("skinClass", skins.numstepper.NumSkin);
						intNumericStepper.styleName = "numericStepper";
						addElement(intNumericStepper);
						break;
					case MonsterDebuggerConstants.TYPE_UINT:
						precizeStepping = false;
						uintNumericStepper = new NumericalStepper();
						uintNumericStepper.minimum = uint.MIN_VALUE;
						uintNumericStepper.maximum = uint.MAX_VALUE;
						uintNumericStepper.height = 23;
						uintNumericStepper.left = 0;
						uintNumericStepper.right = -2;
						uintNumericStepper.value = data["value"];
						uintNumericStepper.stepSize = 1;
						uintNumericStepper.addEventListener(Event.CHANGE, onUintChange, false, 0, true);
						uintNumericStepper.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown, false, 0, true);
						uintNumericStepper.addEventListener(KeyboardEvent.KEY_UP, onKeyUp, false, 0, true);
						uintNumericStepper.addEventListener(FocusEvent.FOCUS_OUT, onUintChange, false, 0, true);
						// uintNumericStepper.setStyle("skinClass", skins.numstepper.NumSkin);
						uintNumericStepper.styleName = "numericStepper";
						addElement(uintNumericStepper);
						break;
				}
			}


			private function onKeyDown(e:KeyboardEvent):void
			{
				if (e.ctrlKey) {
					e.preventDefault();
					if(precizeStepping) {
						NumericalStepper(e.currentTarget).stepSize = 0.1;
					}
				} else if (e.shiftKey) {
					e.preventDefault();
					NumericalStepper(e.currentTarget).stepSize = 10;
				}
			}


			private function onKeyUp(e:KeyboardEvent):void
			{
				if (NumericalStepper(e.currentTarget).stepSize != 1) {
					NumericalStepper(e.currentTarget).stepSize = 1;
				}
			}


			/**
			 * Handle changes of the components
			 */
			private function onComboBoxChange(e:IndexChangeEvent):void
			{
				var sendEvent:PropertyEvent = new PropertyEvent(PropertyEvent.CHANGE_PROPERTY);
				sendEvent.propertyTarget = data["target"];
				sendEvent.propertyName = data["name"];
				sendEvent.propertyValue = Boolean(comboBox.selectedIndex == 0);
				data["value"] = Boolean(comboBox.selectedIndex == 0);
				newValue = Boolean(comboBox.selectedIndex == 0);
				dispatchEvent(sendEvent);
			}

			private function onStringChange(e:TextEvent):void
			{
				var sendEvent:PropertyEvent = new PropertyEvent(PropertyEvent.CHANGE_PROPERTY);
				sendEvent.propertyTarget = data["target"];
				sendEvent.propertyName = data["name"];
				sendEvent.propertyValue = inputField.text;
				data["value"] = inputField.text;
				newValue = inputField.text;
				dispatchEvent(sendEvent);
			}

			private function onNumberChange(e:Event = null):void
			{
				var sendEvent:PropertyEvent = new PropertyEvent(PropertyEvent.CHANGE_PROPERTY);
				sendEvent.propertyTarget = data["target"];
				sendEvent.propertyName = data["name"];
				sendEvent.propertyValue = numNumericStepper.value;
				data["value"] = numNumericStepper.value;
				newValue = numNumericStepper.value;
				dispatchEvent(sendEvent);
			}


			private function onIntChange(e:Event):void
			{
				var sendEvent:PropertyEvent = new PropertyEvent(PropertyEvent.CHANGE_PROPERTY);
				sendEvent.propertyTarget = data["target"];
				sendEvent.propertyName = data["name"];
				sendEvent.propertyValue = intNumericStepper.value;
				data["value"] = intNumericStepper.value;
				newValue = intNumericStepper.value;
				dispatchEvent(sendEvent);
			}

			private function onUintChange(e:Event):void
			{
				var sendEvent:PropertyEvent = new PropertyEvent(PropertyEvent.CHANGE_PROPERTY);
				sendEvent.propertyTarget = data["target"];
				sendEvent.propertyName = data["name"];
				sendEvent.propertyValue = uintNumericStepper.value;
				data["value"] = uintNumericStepper.value;
				newValue = uintNumericStepper.value;
				dispatchEvent(sendEvent);
			}

		]]>
	</fx:Script>
</s:MXDataGridItemRenderer>